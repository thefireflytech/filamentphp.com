---
import { Icon } from 'astro-icon';

const themes = [
  { name: "Light", value: "light", icon: 'heroicons:sun' },
  { name: "Dark", value: "dark", icon: 'heroicons:moon' },
  { name: "System", value: "system", icon: 'heroicons:computer-desktop' },
];
---

<div x-data="{
    theme: 'system',
    isDarkMode: window.matchMedia('(prefers-color-scheme: dark)'),
    selected: 'system',
    init() {
        document.documentElement.setAttribute(
            'data-theme',
            this.updateTheme(),
        )

        new MutationObserver(([{ oldValue }]) => {
            let newValue =
                document.documentElement.getAttribute('data-theme')
            if (newValue !== oldValue) {
                try {
                    window.localStorage.setItem('theme', newValue)
                } catch {}
                this.updateThemeWithoutTransitions(newValue)
            }
        }).observe(document.documentElement, {
            attributeFilter: ['data-theme'],
            attributeOldValue: true,
        })

        this.isDarkMode.addEventListener('change', () =>
            this.updateThemeWithoutTransitions(),
        )
    },
    updateTheme(theme) {
        this.theme = theme ?? window.localStorage.theme ?? 'system'

        if (
            this.theme === 'dark' ||
            (this.theme === 'system' && this.isDarkMode.matches)
        ) {
            document.documentElement.classList.add('dark')
        } else if (
            this.theme === 'light' ||
            (this.theme === 'system' && !this.isDarkMode.matches)
        ) {
            document.documentElement.classList.remove('dark')
        }

        this.selected = this.theme
        window.localStorage.theme = this.theme
        document.documentElement.setAttribute('data-theme', this.theme)
        return this.theme
    },
    updateThemeWithoutTransitions(theme) {
        this.updateTheme(theme)
        document.documentElement.classList.add('[&_*]:!transition-none')
        window.setTimeout(() => {
            document.documentElement.classList.remove(
                '[&_*]:!transition-none',
            )
        }, 0)
    },
}">
  <p class="sr-only">Theme</p>
  <button
    type="button"
    class="flex h-9 w-9 items-center justify-center rounded-full ring-1 ring-black/5 dark:bg-dolphin/10 dark:ring-inset dark:ring-white/5"
    aria-label="Open navigation"
    x-on:click="$refs.panel.toggle"
  >
    <Icon name="heroicons:sun" class="hidden h-6 w-6 fill-butter [[data-theme=light]_&]:block" />
    <Icon name="heroicons:moon" class="hidden h-6 w-6 fill-butter [[data-theme=dark]_&]:block" />
    <Icon name="heroicons:sun" class="hidden h-6 w-6 fill-hurricane [:not(.dark)[data-theme=system]_&]:block" />
    <Icon name="heroicons:moon" class="hidden h-6 w-6 fill-hurricane [.dark[data-theme=system]_&]:block" />
  </button>
  <div
    x-ref="panel"
    class="hidden absolute w-36 space-y-1 rounded-lg bg-white p-3 text-sm shadow-md shadow-black/5 ring-1 ring-black/5 dark:bg-[#1f1c36] dark:ring-white/5"
    x-float.shift.offset.trap="{shift: {padding: 12}}"
    aria-label="Theme options"
  >
      {themes.map((theme) => (
        <button
          x-bind:key={theme.value}
          x-on:click={`updateTheme('${theme.value}'); $refs.panel.close();`}
          class="w-full flex cursor-pointer select-none items-center rounded-[0.5rem] p-1 hover:bg-gray-100 hover:dark:bg-gray-900/40 transition duration-200"
          x-bind:class={`{
              'text-butter hover:text-butter hover:dark:text-butter': selected === '${theme.value}',
              'text-gray-700 dark:text-gray-300 hover:dark:text-white': selected !== '${theme.value}',
            }`}
        >
          <div class="rounded-md bg-white p-1.5 ring-1 ring-gray-900/5 dark:bg-dolphin/20 dark:ring-inset dark:ring-white/5 transition duration-200">
            <Icon name={theme.icon} class="h-4 w-4" x-bind:class={`selected == '${theme.value}' ? 'fill-butter dark:fill-butter' : 'fill-hurricane'`} />
          </div>
          <div class="ml-3">{theme.name}</div>
        </button>
      ))}
  </div>
</div>
